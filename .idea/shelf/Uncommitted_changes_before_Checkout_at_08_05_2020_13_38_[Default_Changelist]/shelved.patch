Index: src/Controller/BlogController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\Blog;\r\nuse App\\Form\\BlogType;\r\nuse App\\Repository\\BlogRepository;\r\nuse App\\Repository\\CategoryRepository;\r\nuse App\\Repository\\TagRepository;\r\nuse App\\Services\\FileService;\r\nuse DateTime;\r\nuse DateTimeZone;\r\nuse Exception;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nclass BlogController extends AbstractController\r\n{\r\n    /**\r\n     * @Route(\"/blog\", defaults={\"page\": \"1\"}, name=\"blog_show_list\", methods={\"GET\"})\r\n     * @Route(\"/blog/{page<[1-9]\\d*>}\", methods=\"GET\", name=\"blog_show_list_paginated\")\r\n     * @param BlogRepository $blogRepository\r\n     * @param CategoryRepository $categoryRepository\r\n     * @param int $page\r\n     * @return Response\r\n     */\r\n    public function list(BlogRepository $blogRepository, CategoryRepository $categoryRepository, int $page): Response\r\n    {\r\n        return $this->render('blog/list.html.twig', [\r\n            'posts_paginated' => $blogRepository->findAllPaginated($page),\r\n            'categories' => $categoryRepository->findBy(['environnement' => '2'])\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * C'est la sidebar de la page list et de la page simple\r\n     * @param BlogRepository $blogRepository\r\n     * @param CategoryRepository $categoryRepository\r\n     * @param TagRepository $tagRepository\r\n     * @return Response\r\n     */\r\n    public function blogSideBar(BlogRepository $blogRepository, CategoryRepository $categoryRepository, TagRepository $tagRepository)\r\n    {\r\n        return $this->render('blog/blog_side_bar.html.twig', [\r\n            'posts' => $blogRepository->findAllOrderByView(),\r\n            'categories' => $categoryRepository->findAllCategoriesBlog(),\r\n            'tags' => $tagRepository->findAllBlogsTags()\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/blog/show/{slug}\", name=\"blog_show_detail\", methods={\"GET\"})\r\n     * @param Blog $blog\r\n     * @return Response\r\n     */\r\n    public function show(Blog $blog): Response\r\n    {\r\n        if ($blog) {\r\n            $blog->setView($blog->getView() + 1);\r\n            $entityManager = $this->getDoctrine()->getManager();\r\n            $entityManager->persist($blog);\r\n            $entityManager->flush();\r\n        }\r\n        return $this->render('blog/detail.html.twig', [\r\n            'blog' => $blog,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/admin/blog\", defaults={\"page\": \"1\"}, name=\"blog_index\", methods={\"GET\"})\r\n     * @Route(\"/admin/blog/{page<[1-9]\\d*>}\", methods=\"GET\", name=\"blog_index_paginated\")\r\n     * @param BlogRepository $blogRepository\r\n     * @param int $page\r\n     * @return Response\r\n     */\r\n    public function index(BlogRepository $blogRepository, int $page): Response\r\n    {\r\n        return $this->render('blog/index.html.twig', [\r\n            'blogs_paginate' => $blogRepository->findAllPaginatedAdmin($page),\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/admin/blog/new\", name=\"blog_new\", methods={\"GET\",\"POST\"})\r\n     * @param Request $request\r\n     * @param FileService $fileService\r\n     * @return Response\r\n     * @throws Exception\r\n     */\r\n    public function new(Request $request, FileService $fileService): Response\r\n    {\r\n        $blog = new Blog();\r\n        $form = $this->createForm(BlogType::class, $blog);\r\n        $form->handleRequest($request);\r\n\r\n        if ($form->isSubmitted() && $form->isValid()) {\r\n            $image = $form->getData()->getMainImage();\r\n            if ($image) {\r\n                $data = $fileService->transformToWebP($image->getFile());\r\n                $image->setCompleteUrl($data['filename']);\r\n                $image->setFolder($data['folder']);\r\n                $image->setExt('.webp');\r\n                $image->setUpdatedAt(new DateTime('now', new DateTimeZone('Europe/Paris')));\r\n                $fileService->moveToFolderAndModifyToWebP($this->getParameter($data['folder']), $data['ext'], $data['filename']);\r\n            }\r\n            $blog->setMainImage($image);\r\n            $blog->setUser($this->getUser());\r\n            $blog->setSlug($blog->getTitle());\r\n            if ($blog->getCreatedAt() == null) { $blog->setCreatedAt(new DateTime('now', new DateTimeZone('Europe/Paris'))); }\r\n            $blog->setUpdatedAt(new DateTime('now', new DateTimeZone('Europe/Paris')));\r\n            $entityManager = $this->getDoctrine()->getManager();\r\n            $entityManager->persist($blog);\r\n            $entityManager->flush();\r\n\r\n            return $this->redirectToRoute('blog_index_paginated', ['page' => 1]);\r\n        }\r\n\r\n        return $this->render('blog/new.html.twig', [\r\n            'blog' => $blog,\r\n            'form' => $form->createView(),\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/admin/blog/edit/{slug}\", name=\"blog_edit\", methods={\"GET\",\"POST\"})\r\n     * @param Request $request\r\n     * @param Blog $blog\r\n     * @param FileService $fileService\r\n     * @return Response\r\n     * @throws Exception\r\n     */\r\n    public function edit(Request $request, Blog $blog, FileService $fileService): Response\r\n    {\r\n        $form = $this->createForm(BlogType::class, $blog);\r\n        $form->handleRequest($request);\r\n        if ($form->isSubmitted() && $form->isValid()) {\r\n            $image = $form->getData()->getMainImage();\r\n            if ($image && $image->getFile()) {\r\n                $dataEdit = $fileService->transformToWebP($image->getFile());\r\n                $image->setCompleteUrl($dataEdit['filename']);\r\n                $image->setFolder('images');\r\n                $image->setExt('.webp');\r\n                if ($image->getTempFileName()) {\r\n                    $fileService->uploadFolder($this->getParameter($dataEdit['folder']), $dataEdit['ext'], $dataEdit['filename'], $image->getTempFileName().'.webp');\r\n                } else {\r\n                    $image->setUpdatedAt(new DateTime('now', new DateTimeZone('Europe/Paris')));\r\n                    $fileService->moveToFolderAndModifyToWebP($this->getParameter($dataEdit['folder']), $dataEdit['ext'], $dataEdit['filename']);\r\n                }\r\n            }\r\n            $blog->setUpdatedAt(new DateTime('now', new DateTimeZone('Europe/Paris')));\r\n            $this->getDoctrine()->getManager()->flush();\r\n\r\n            return $this->redirectToRoute('blog_index');\r\n        }\r\n\r\n        return $this->render('blog/edit.html.twig', [\r\n            'blog' => $blog,\r\n            'form' => $form->createView(),\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/admin/blog/delete/{id}\", name=\"blog_delete\", methods={\"DELETE\"})\r\n     * @param Request $request\r\n     * @param Blog $blog\r\n     * @return Response\r\n     */\r\n    public function delete(Request $request, Blog $blog): Response\r\n    {\r\n        if ($this->isCsrfTokenValid('delete'.$blog->getId(), $request->request->get('_token'))) {\r\n            if ($blog->getMainImage() !== null) {\r\n                $image = $this->getParameter($blog->getMainImage()->getFolder()).'/'.$blog->getMainImage()->getCompleteUrl();\r\n                if (file_exists($image.'.webp')) {\r\n                    unlink($image.'.webp');\r\n                }\r\n            }\r\n            $entityManager = $this->getDoctrine()->getManager();\r\n            $entityManager->remove($blog);\r\n            $entityManager->flush();\r\n        }\r\n\r\n        return $this->redirectToRoute('blog_index_paginated', ['page' => 1]);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/BlogController.php	(revision 383359dcff9b3cf2259f1d4beb58c1e1fa5ccb1c)
+++ src/Controller/BlogController.php	(date 1588937682314)
@@ -28,6 +28,7 @@
      */
     public function list(BlogRepository $blogRepository, CategoryRepository $categoryRepository, int $page): Response
     {
+        dd($blogRepository->findAllPaginated($page));
         return $this->render('blog/list.html.twig', [
             'posts_paginated' => $blogRepository->findAllPaginated($page),
             'categories' => $categoryRepository->findBy(['environnement' => '2'])
